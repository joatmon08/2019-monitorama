package mock

import (
	"encoding/json"
)

type Severity string

const (
	Low      Severity = "LOW"
	Medium   Severity = "MEDIUM"
	High     Severity = "HIGH"
	Critical Severity = "CRITICAL"
	end
)

type Vulnerability struct {
	ID          string   `json:"id"`
	BaseScore   float32  `json:"base_score,omitempty"`
	Severity    Severity `json:"severity"`
	Vector      string   `json:"vector,omitempty"`
	Package     string   `json:"package,omitempty"`
	Description string   `json:"description"`
}

var applicationVulnerability = &Vulnerability{
	ID:          "CVE-2019-9947",
	BaseScore:   6.1,
	Severity:    Medium,
	Vector:      "AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
	Description: "An issue was discovered in urllib2 in Python 2.x through 2.7.16 and urllib in Python 3.x through 3.7.3. CRLF injection is possible if the attacker controls a url parameter, as demonstrated by the first argument to urllib.request.urlopen with \r\n (specifically in the path component of a URL that lacks a ? character) followed by an HTTP header or a Redis command. This is similar to the CVE-2019-9740 query string issue.",
}

var nodejsVulnerability = &Vulnerability{
	ID:          "1197",
	Severity:    Critical,
	Package:     "require-port",
	Description: "Version 1.0.0 of require-port contains malicious code as a preinstall script. The package is malware designed to take advantage of users making a mistake when typing the name of a module to install. When installed, the package downloads a file from a remote server, executes it and opens a backdoor.",
}

var fullScan = []*Vulnerability{
	applicationVulnerability,
	nodejsVulnerability,
}

var containerVulnerability = &Vulnerability{
	ID:          "CVE-2018-20699",
	BaseScore:   4.9,
	Severity:    Medium,
	Vector:      "AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
	Description: "Docker Engine before 18.09 allows attackers to cause a denial of service (dockerd memory consumption) via a large integer in a --cpuset-mems or --cpuset-cpus value, related to daemon/daemon_unix.go, pkg/parsers/parsers.go, and pkg/sysinfo/sysinfo.go.",
}

func ScanApplication() []*Vulnerability {
	vulnerabilities := []*Vulnerability{}
	for _, vuln := range fullScan {
		switch sev := vuln.Severity; sev {
		default:
			vulnerabilities = append(vulnerabilities, vuln)
		}
	}
	return vulnerabilities
}

func ScanContainer() []*Vulnerability {
	vulnerabilities := []*Vulnerability{}
	scan := []*Vulnerability{
		containerVulnerability,
	}
	for _, vuln := range scan {
		switch sev := vuln.Severity; sev {
		default:
			vulnerabilities = append(vulnerabilities, vuln)
		}
	}
	return vulnerabilities
}

func GenerateVulnerabilityReport(vulnerabilities []*Vulnerability) (string, error) {
	b, err := json.Marshal(vulnerabilities)
	if err != nil {
		return "", err
	}
	return string(b), nil
}
